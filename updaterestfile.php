<?php
$docsrcdirectorylist = ['..\\..\\Discord_Docs_Ressource\\docs\\resources', '..\\..\\Discord_Docs_Ressource\\docs\\interactions'];
$targetcsvfile = './src/REST/Base/restrequestlist.csv';
$targetclassfile = './src/REST/Base/RestStatusList.php';

function lb() {
    if(php_sapi_name() == 'cli') {
        return "\n";
    }
    return "<br />";
}

$csvarray = array();
$constarray = array();
for($dir_i = 0; $dir_i < count($docsrcdirectorylist); $dir_i++) {
    $docsrcdirectory = $docsrcdirectorylist[$dir_i];
    echo "Begin building REST request from Discord docs. Using directory '" . $docsrcdirectory . "'" . lb();
    $filelist = scandir($docsrcdirectory);
    for ($fi = 0; $fi < count($filelist); $fi++) {
        if ($filelist[$fi] == '.' || $filelist[$fi] == '..') {
            continue;
        }

        echo "Current file for processing: ".$filelist[$fi] . lb();
        $curfilearray = file($docsrcdirectory . "\\" . $filelist[$fi]);
        for ($i = 0; $i < count($curfilearray); $i++) {
            if (strpos($curfilearray[$i], '%') === false) {
                continue;
            }
            $expstr = explode('%', substr($curfilearray[$i], 3));
            $csv_part1 = 'REST_' . strtoupper(str_replace(' ', '_', trim($expstr[0])));
            $slashinrestname = strpos($csv_part1, "/");
            if ($slashinrestname !== false) {
                $csv_part1 = substr($csv_part1, 0, $slashinrestname);
            }
            if (in_array($csv_part1, $constarray)) {
                continue;
            }

            $expstr2 = explode(' ', trim($expstr[1]));
            $csv_part2 = $expstr2[0];

            preg_match_all("/{([a-zA-Z.]*)/", $expstr2[1], $matches);

            if (count($matches[1]) > 0) {
                $curworkline = $expstr2[1];
                for ($ii = 0; $ii < count($matches[1]); $ii++) {
                    $replacevar = '##' . strtoupper(str_replace('.', '_', $matches[1][$ii])) . '##';
                    $curworkline = str_replace("{" . $matches[1][$ii], $replacevar, $curworkline);
                }
                $curworkline = preg_replace("/#([a-zA-Z\/_-]*})/", '', $curworkline);
                $csv_part3 = $curworkline;
                unset($curworkline);
            } else {
                $csv_part3 = $expstr2[1];
            }
            $csvarray[] = str_replace('-', '_', $csv_part1) . ";" . $csv_part2 . ";" . $csv_part3 . "?";
            $constarray[] = str_replace('-', '_', $csv_part1);
        }
    }
}
$csvarray[] = "REST_INTERACTION_RESPONSE;POST;interactions/##INTERACTION_ID##/##INTERACTION_TOKEN/callback?"; // TODO Interactions to be automated in the future?

echo "Building done... writing to '".$targetcsvfile."'".lb();
$fd = fopen($targetcsvfile, 'w');
fwrite($fd, implode("\n", $csvarray));
fclose($fd);

echo "Writing to '".$targetcsvfile."' finished, creating class with appropriate const vars.".lb().lb();

echo "Start writing to class: '".$targetclassfile."'".lb();
$fd = fopen($targetclassfile, 'w');
$classstring = <<<CLASS
<?php
/**
 *
 * Nebucord - A Discord Websocket and REST API
 *
 * Copyright (C) 2018 Bernd Robertz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Bernd Robertz <brobertz.net@gmail.com>
 *
 */

namespace Nebucord\REST\Base;

/**
 * Class RestStatusList
 *
 * ATTENTION: This class is autogenerated!
 * This class stores the possible REST actions as consts used by the REST API to send requests.
 *
 * For detailed status information visit the Discord developer site: https://discordapp.com/developers/docs/intro
 *
 * @package Nebucord\REST\Base
 */
abstract class RestStatusList {

CLASS;
echo "Building consts from Discord docs...".lb();
for($i = 0; $i < count($constarray); $i++) {
    $classstring .= "\tconst ".$constarray[$i]." = '".$constarray[$i]."';\n";
}
$classstring .= "\tconst REST_INTERACTION_RESPONSE = 'REST_INTERACTION_RESPONSE';\n"; // TODO Interactions to be automated in the future?
$classstring .= "}";
fwrite($fd, $classstring);
fclose($fd);
echo "Done building, generated class '".$targetclassfile."'".lb().lb();
